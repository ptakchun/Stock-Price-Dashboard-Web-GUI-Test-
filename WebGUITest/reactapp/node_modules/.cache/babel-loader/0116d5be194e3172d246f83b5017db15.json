{"ast":null,"code":"var _jsxFileName = \"/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/js/main.js\";\nimport React, { useState, useEffect } from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\nimport '../bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { symbolsListToMultiSelectOption, multiSelectOptionToSymbolsList, useInput } from './util';\nimport { tableConfig, historicalPriceTableConfig } from './config';\nconst API_URL = 'http://localhost:3000';\nexport const Main = props => {\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\n    \"update_frequency_ms\": 3000\n  });\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Data Update Frequency(ms): \",\n    id: \"update_frequency_ms\"\n  });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input, set_update_show_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Show Frequency(ms): \",\n    id: \"update_show_frequency_ms\"\n  });\n  const [number_of_elements, number_of_elements_user_input, set_number_of_elements] = useInput({\n    type: \"text\",\n    label: \"Elements per update: \",\n    id: \"number_of_elements\"\n  });\n  const [table, setTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [optionsSymbols, setOptionsSymbols] = useState([]);\n  const [errorMessage_update_show_frequency_ms, setErrorMessage_update_show_frequency_ms] = useState(\"\");\n  const [errorMessage_update_frequency_ms, setErrorMessage_update_frequency_ms] = useState(\"\");\n  const [errorMessage_number_of_elements, setErrorMessage_number_of_elements] = useState(\"\");\n  useEffect(() => {\n    set_update_show_frequency_ms(3000);\n    getServerConfig();\n    handleReloadTable();\n    setErrorMessage_update_show_frequency_ms(\"\");\n  }, []);\n  useEffect(() => {\n    if (selectedSymbolReplay) {\n      axios.post(API_URL + \"/getHistoricalPriceTable\", {\n        symbol: selectedSymbolReplay.value\n      }).then(res => {\n        console.log(res);\n        setHistoricalPriceTable(res.data);\n      });\n    }\n  }, [selectedSymbolReplay]);\n\n  function handleReloadTable() {\n    clearInterval(getTableFunc);\n    let user_input = parseInt(update_show_frequency_ms);\n\n    if (Number.isFinite(user_input) && user_input > 0) {\n      set_client_config({ ...client_config,\n        \"update_frequency_ms\": user_input\n      });\n      setErrorMessage_update_show_frequency_ms(\"\");\n    } else {\n      setErrorMessage_update_show_frequency_ms(\"The input of Show Frequency(ms) is not valid! Please input a positive number\");\n    }\n\n    setGetTableFunc(setInterval(function () {\n      axios.get(API_URL + \"/getTable\").then(res => {\n        console.log(res);\n        setTable(table => {\n          let result = res.data;\n          let n = res.data.length < table.length ? res.data.length : table.length;\n\n          for (let i = 0; i < n; i++) {\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n\n          return result;\n        });\n      });\n    }, client_config['update_frequency_ms']));\n  }\n\n  function handleServerConfig() {\n    let server_config = {};\n    let user_input_update_frequency_ms = parseInt(update_frequency_ms);\n    let isError = false;\n\n    if (Number.isFinite(user_input_update_frequency_ms) && user_input_update_frequency_ms > 0) {\n      server_config[\"update_frequency_milliseconds\"] = user_input_update_frequency_ms;\n      setErrorMessage_update_frequency_ms(\"\");\n    } else {\n      isError = true;\n      setErrorMessage_update_frequency_ms(\"The input of Data Update Frequency(ms) is not valid! Please input a positive number\");\n    }\n\n    if (Number.isFinite(parseInt(number_of_elements))) {\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements);\n      setErrorMessage_number_of_elements(\"\");\n    } else {\n      isError = true;\n      setErrorMessage_number_of_elements(\"The input of Elements per update is not valid! Please input a positive number\");\n    }\n\n    if (isError) {\n      return;\n    }\n\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL + '/setServerConfig', server_config).then(function (response) {\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  function getServerConfig() {\n    axios.get(API_URL + '/getServerConfig').then(function (res) {\n      console.log(res);\n      let arr = symbolsListToMultiSelectOption(res.data.available_symbols);\n      console.log(arr);\n      setOptionsSymbols(arr); // setSelectedSymbols(symbolsListToMultiSelectOption(arr));\n\n      set_number_of_elements(res.data.elements_per_update);\n      set_update_frequency_ms(res.data.update_frequency_milliseconds);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"Main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \"Server Configuration:\"), /*#__PURE__*/React.createElement(MultiSelect, {\n    className: \"MultiSelectSymbol\",\n    options: optionsSymbols,\n    value: selectedSymbols,\n    onChange: setSelectedSymbols,\n    labelledBy: \"Select Symbols\",\n    overrideStrings: {\n      \"selectSomeItems\": \"Select Symbols...\",\n      \"allItemsAreSelected\": \"All Symbols are selected.\",\n      \"selectAll\": \"Select All\",\n      \"search\": \"Search symbols...\",\n      \"clearSearch\": \"Clear Search\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), update_frequency_ms_user_input, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, errorMessage_update_frequency_ms), number_of_elements_user_input, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }\n  }, errorMessage_number_of_elements), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"mainButton btn btn-outline-info\",\n    onClick: () => handleServerConfig(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, \"Update Server Config\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, \"Client GUI Configuration:\"), update_show_frequency_ms_user_input, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }, errorMessage_update_show_frequency_ms), /*#__PURE__*/React.createElement(\"button\", {\n    className: \" mainButton btn btn-outline-info\",\n    onClick: () => handleReloadTable(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Reload Table\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    title: \"Stock Price Table\",\n    columns: tableConfig.columns,\n    data: table,\n    pagination: true,\n    striped: true,\n    conditionalRowStyles: tableConfig.conditionalRowStyles,\n    dense: true,\n    center: true,\n    paginationPerPage: 100,\n    paginationRowsPerPageOptions: [10, 20, 30, 50, 100],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }));\n};\nexport default App;","map":{"version":3,"sources":["/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/js/main.js"],"names":["React","useState","useEffect","DataTable","MultiSelect","axios","symbolsListToMultiSelectOption","multiSelectOptionToSymbolsList","useInput","tableConfig","historicalPriceTableConfig","API_URL","Main","props","getTableFunc","setGetTableFunc","client_config","set_client_config","update_frequency_ms","update_frequency_ms_user_input","set_update_frequency_ms","type","label","id","update_show_frequency_ms","update_show_frequency_ms_user_input","set_update_show_frequency_ms","number_of_elements","number_of_elements_user_input","set_number_of_elements","table","setTable","selectedSymbols","setSelectedSymbols","optionsSymbols","setOptionsSymbols","errorMessage_update_show_frequency_ms","setErrorMessage_update_show_frequency_ms","errorMessage_update_frequency_ms","setErrorMessage_update_frequency_ms","errorMessage_number_of_elements","setErrorMessage_number_of_elements","getServerConfig","handleReloadTable","selectedSymbolReplay","post","symbol","value","then","res","console","log","setHistoricalPriceTable","data","clearInterval","user_input","parseInt","Number","isFinite","setInterval","get","result","n","length","i","handleServerConfig","server_config","user_input_update_frequency_ms","isError","response","arr","available_symbols","elements_per_update","update_frequency_milliseconds","columns","conditionalRowStyles","App"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\n\nimport '../bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {symbolsListToMultiSelectOption, multiSelectOptionToSymbolsList, useInput} from './util'\nimport {tableConfig, historicalPriceTableConfig} from './config'\n\n\nconst API_URL = 'http://localhost:3000';\n\n\nexport const Main = (props) =>{\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\"update_frequency_ms\": 3000});\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({ type: \"text\",label:\"Data Update Frequency(ms): \", id:\"update_frequency_ms\" });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input,set_update_show_frequency_ms] = useInput({ type: \"text\",label:\"Show Frequency(ms): \", id:\"update_show_frequency_ms\" });\n  const [number_of_elements, number_of_elements_user_input,set_number_of_elements] = useInput({ type: \"text\",label:\"Elements per update: \", id:\"number_of_elements\" });\n  const [table, setTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [optionsSymbols, setOptionsSymbols] = useState([]);\n  const [errorMessage_update_show_frequency_ms, setErrorMessage_update_show_frequency_ms] = useState(\"\");\n  const [errorMessage_update_frequency_ms, setErrorMessage_update_frequency_ms] = useState(\"\");\n  const [errorMessage_number_of_elements, setErrorMessage_number_of_elements] = useState(\"\");\n\n  useEffect(()=>{\n    set_update_show_frequency_ms(3000);\n    getServerConfig();\n    handleReloadTable();\n    setErrorMessage_update_show_frequency_ms(\"\");\n  },[]);\n\n  useEffect(()=>{\n    if(selectedSymbolReplay){\n      axios.post(API_URL+\"/getHistoricalPriceTable\", {symbol:selectedSymbolReplay.value}).then((res)=>{\n        console.log(res);\n  \n        setHistoricalPriceTable(res.data);\n  \n      }); \n    }\n    \n  },[selectedSymbolReplay]);\n\n  \n  function handleReloadTable(){\n    clearInterval(getTableFunc);\n    let user_input = parseInt(update_show_frequency_ms);\n    if(Number.isFinite(user_input) && user_input > 0){\n      set_client_config({...client_config, \"update_frequency_ms\":user_input});\n      setErrorMessage_update_show_frequency_ms(\"\");\n    }else{\n      setErrorMessage_update_show_frequency_ms(\"The input of Show Frequency(ms) is not valid! Please input a positive number\");\n    }\n    \n    setGetTableFunc(setInterval(function(){ \n      axios.get(API_URL+\"/getTable\").then((res)=>{\n        console.log(res);\n  \n        setTable((table)=>{\n          let result = res.data;\n          let n = res.data.length < table.length? res.data.length:table.length;\n          for(let i=0; i<n; i++){\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n          return result;\n        });\n\n      }); \n    }, client_config['update_frequency_ms']));\n\n  }\n\n  function handleServerConfig(){\n    let server_config = {};\n    let user_input_update_frequency_ms = parseInt(update_frequency_ms);\n    let isError = false;\n    if(Number.isFinite(user_input_update_frequency_ms) && user_input_update_frequency_ms > 0 ){\n      server_config[\"update_frequency_milliseconds\"] = user_input_update_frequency_ms;\n      setErrorMessage_update_frequency_ms(\"\");\n    }else{\n      isError = true;\n      setErrorMessage_update_frequency_ms(\"The input of Data Update Frequency(ms) is not valid! Please input a positive number\");\n    }\n    if(Number.isFinite(parseInt(number_of_elements))){\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements)\n      setErrorMessage_number_of_elements(\"\");\n    }else{\n      isError = true;\n      setErrorMessage_number_of_elements(\"The input of Elements per update is not valid! Please input a positive number\");\n    }\n    if(isError){\n      return;\n    }\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL+'/setServerConfig',server_config).then(function(response){\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  function getServerConfig(){\n    axios.get(API_URL+'/getServerConfig').then(function(res){\n      console.log(res);\n      let arr = symbolsListToMultiSelectOption(res.data.available_symbols);\n      console.log(arr);\n      setOptionsSymbols(arr); \n      // setSelectedSymbols(symbolsListToMultiSelectOption(arr));\n      set_number_of_elements(res.data.elements_per_update); \n      set_update_frequency_ms(res.data.update_frequency_milliseconds);\n    });\n  }\n\n  \n  \n  \n  return (\n    <div id=\"Main\">\n      <h4>Server Configuration:</h4>\n      <MultiSelect\n        className=\"MultiSelectSymbol\"\n        options={optionsSymbols}\n        value={selectedSymbols}\n        onChange={setSelectedSymbols}\n        labelledBy={\"Select Symbols\"}\n        overrideStrings = {{\n          \"selectSomeItems\": \"Select Symbols...\",\n          \"allItemsAreSelected\": \"All Symbols are selected.\",\n          \"selectAll\": \"Select All\",\n          \"search\": \"Search symbols...\",\n          \"clearSearch\": \"Clear Search\"\n        }}\n      />\n      {update_frequency_ms_user_input}\n      <p className=\"errorMessage\">{errorMessage_update_frequency_ms}</p>\n      {number_of_elements_user_input}\n      <p className=\"errorMessage\">{errorMessage_number_of_elements}</p>\n      <button className=\"mainButton btn btn-outline-info\" onClick={()=>handleServerConfig()}>\n        Update Server Config\n      </button>\n      <br/>\n      <br/>\n      <h4>Client GUI Configuration:</h4>\n      {update_show_frequency_ms_user_input}\n      <p className=\"errorMessage\">{errorMessage_update_show_frequency_ms}</p>\n      \n\n      <button className=\" mainButton btn btn-outline-info\" onClick={()=>handleReloadTable()}>\n        Reload Table\n      </button>\n      <br/>\n      <br/>\n\n\n      <div>\n        <DataTable\n        title=\"Stock Price Table\"\n        columns={tableConfig.columns}\n        data={table}\n        pagination={true}\n        striped={true}\n        conditionalRowStyles = {tableConfig.conditionalRowStyles}\n        dense={true}\n        center = {true}\n        paginationPerPage={100}\n        paginationRowsPerPageOptions={[10, 20, 30, 50, 100]}\n        />\n      </div>\n      <br/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}