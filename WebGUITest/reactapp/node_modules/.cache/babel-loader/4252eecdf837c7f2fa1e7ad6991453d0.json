{"ast":null,"code":"var _jsxFileName = \"/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/js/main.js\";\nimport React, { useState, useEffect } from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\nimport '../bootstrap/dist/css/bootstrap.min.css';\nimport '../stylesheet/App.css';\nimport { multiSelectOptionToSymbolsList, useInput, API_URL } from './util';\nimport { tableConfig } from './config';\nexport const Main = props => {\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\n    \"update_frequency_ms\": 3000\n  });\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Data Update Frequency(ms): \",\n    id: \"update_frequency_ms\"\n  });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input, set_update_show_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Show Frequency(ms): \",\n    id: \"update_show_frequency_ms\"\n  });\n  const [number_of_elements, number_of_elements_user_input, set_number_of_elements] = useInput({\n    type: \"text\",\n    label: \"Elements per update: \",\n    id: \"number_of_elements\"\n  });\n  const [table, setTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [errorMessage_update_show_frequency_ms, setErrorMessage_update_show_frequency_ms] = useState(\"\");\n  const [errorMessage_update_frequency_ms, setErrorMessage_update_frequency_ms] = useState(\"\");\n  const [errorMessage_number_of_elements, setErrorMessage_number_of_elements] = useState(\"\");\n  useEffect(() => {\n    set_update_show_frequency_ms(3000);\n    handleReloadTable();\n    setErrorMessage_update_show_frequency_ms(\"\");\n    set_update_frequency_ms(props.update_frequency_ms);\n    set_number_of_elements(props.number_of_elements);\n  }, []);\n\n  function handleReloadTable() {\n    clearInterval(getTableFunc);\n    let user_input = parseInt(update_show_frequency_ms);\n\n    if (Number.isFinite(user_input) && user_input > 0) {\n      set_client_config({ ...client_config,\n        \"update_frequency_ms\": user_input\n      });\n      setErrorMessage_update_show_frequency_ms(\"\");\n    } else {\n      setErrorMessage_update_show_frequency_ms(\"The input of Show Frequency(ms) is not valid! Please input a positive number\");\n    }\n\n    setGetTableFunc(setInterval(function () {\n      axios.get(API_URL + \"/getTable\").then(res => {\n        console.log(res);\n        setTable(table => {\n          let result = res.data;\n          let n = res.data.length < table.length ? res.data.length : table.length;\n\n          for (let i = 0; i < n; i++) {\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n\n          return result;\n        });\n      });\n    }, client_config['update_frequency_ms']));\n  }\n\n  function handleServerConfig() {\n    let server_config = {};\n    let user_input_update_frequency_ms = parseInt(update_frequency_ms);\n    let isError = false;\n\n    if (Number.isFinite(user_input_update_frequency_ms) && user_input_update_frequency_ms > 0) {\n      server_config[\"update_frequency_milliseconds\"] = user_input_update_frequency_ms;\n      setErrorMessage_update_frequency_ms(\"\");\n    } else {\n      isError = true;\n      setErrorMessage_update_frequency_ms(\"The input of Data Update Frequency(ms) is not valid! Please input a positive number\");\n    }\n\n    if (Number.isFinite(parseInt(number_of_elements))) {\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements);\n      setErrorMessage_number_of_elements(\"\");\n    } else {\n      isError = true;\n      setErrorMessage_number_of_elements(\"The input of Elements per update is not valid! Please input a positive number\");\n    }\n\n    if (isError) {\n      return;\n    }\n\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL + '/setServerConfig', server_config).then(function (response) {\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"Main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, \"Server Configuration:\"), /*#__PURE__*/React.createElement(MultiSelect, {\n    className: \"MultiSelectSymbol\",\n    options: props.optionsSymbols,\n    value: selectedSymbols,\n    onChange: setSelectedSymbols,\n    labelledBy: \"Select Symbols\",\n    overrideStrings: {\n      \"selectSomeItems\": \"Select Symbols...\",\n      \"allItemsAreSelected\": \"All Symbols are selected.\",\n      \"selectAll\": \"Select All\",\n      \"search\": \"Search symbols...\",\n      \"clearSearch\": \"Clear Search\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), update_frequency_ms_user_input, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, errorMessage_update_frequency_ms), number_of_elements_user_input, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, errorMessage_number_of_elements), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"mainButton btn btn-outline-info\",\n    onClick: () => handleServerConfig(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, \"Update Server Config\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"Client GUI Configuration:\"), update_show_frequency_ms_user_input, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"errorMessage\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, errorMessage_update_show_frequency_ms), /*#__PURE__*/React.createElement(\"button\", {\n    className: \" mainButton btn btn-outline-info\",\n    onClick: () => handleReloadTable(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, \"Reload Table\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    title: \"Stock Price Table\",\n    columns: tableConfig.columns,\n    data: table,\n    pagination: true,\n    striped: true,\n    conditionalRowStyles: tableConfig.conditionalRowStyles,\n    dense: true,\n    center: true,\n    paginationPerPage: 100,\n    paginationRowsPerPageOptions: [10, 20, 30, 50, 100],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Main;","map":{"version":3,"sources":["/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/js/main.js"],"names":["React","useState","useEffect","DataTable","MultiSelect","axios","multiSelectOptionToSymbolsList","useInput","API_URL","tableConfig","Main","props","getTableFunc","setGetTableFunc","client_config","set_client_config","update_frequency_ms","update_frequency_ms_user_input","set_update_frequency_ms","type","label","id","update_show_frequency_ms","update_show_frequency_ms_user_input","set_update_show_frequency_ms","number_of_elements","number_of_elements_user_input","set_number_of_elements","table","setTable","selectedSymbols","setSelectedSymbols","errorMessage_update_show_frequency_ms","setErrorMessage_update_show_frequency_ms","errorMessage_update_frequency_ms","setErrorMessage_update_frequency_ms","errorMessage_number_of_elements","setErrorMessage_number_of_elements","handleReloadTable","clearInterval","user_input","parseInt","Number","isFinite","setInterval","get","then","res","console","log","result","data","n","length","i","handleServerConfig","server_config","user_input_update_frequency_ms","isError","post","response","optionsSymbols","columns","conditionalRowStyles"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\n\nimport '../bootstrap/dist/css/bootstrap.min.css';\nimport '../stylesheet/App.css';\nimport {multiSelectOptionToSymbolsList, useInput, API_URL} from './util'\nimport {tableConfig} from './config'\n\nexport const Main = (props) =>{\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\"update_frequency_ms\": 3000});\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({ type: \"text\",label:\"Data Update Frequency(ms): \", id:\"update_frequency_ms\" });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input,set_update_show_frequency_ms] = useInput({ type: \"text\",label:\"Show Frequency(ms): \", id:\"update_show_frequency_ms\" });\n  const [number_of_elements, number_of_elements_user_input,set_number_of_elements] = useInput({ type: \"text\",label:\"Elements per update: \", id:\"number_of_elements\" });\n  const [table, setTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [errorMessage_update_show_frequency_ms, setErrorMessage_update_show_frequency_ms] = useState(\"\");\n  const [errorMessage_update_frequency_ms, setErrorMessage_update_frequency_ms] = useState(\"\");\n  const [errorMessage_number_of_elements, setErrorMessage_number_of_elements] = useState(\"\");\n\n  useEffect(()=>{\n    set_update_show_frequency_ms(3000);\n    handleReloadTable();\n    setErrorMessage_update_show_frequency_ms(\"\");\n    set_update_frequency_ms(props.update_frequency_ms);\n    set_number_of_elements(props.number_of_elements);\n  },[]);\n\n  \n  function handleReloadTable(){\n    clearInterval(getTableFunc);\n    let user_input = parseInt(update_show_frequency_ms);\n    if(Number.isFinite(user_input) && user_input > 0){\n      set_client_config({...client_config, \"update_frequency_ms\":user_input});\n      setErrorMessage_update_show_frequency_ms(\"\");\n    }else{\n      setErrorMessage_update_show_frequency_ms(\"The input of Show Frequency(ms) is not valid! Please input a positive number\");\n    }\n    \n    setGetTableFunc(setInterval(function(){ \n      axios.get(API_URL+\"/getTable\").then((res)=>{\n        console.log(res);\n  \n        setTable((table)=>{\n          let result = res.data;\n          let n = res.data.length < table.length? res.data.length:table.length;\n          for(let i=0; i<n; i++){\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n          return result;\n        });\n\n      }); \n    }, client_config['update_frequency_ms']));\n\n  }\n\n  function handleServerConfig(){\n    let server_config = {};\n    let user_input_update_frequency_ms = parseInt(update_frequency_ms);\n    let isError = false;\n    if(Number.isFinite(user_input_update_frequency_ms) && user_input_update_frequency_ms > 0 ){\n      server_config[\"update_frequency_milliseconds\"] = user_input_update_frequency_ms;\n      setErrorMessage_update_frequency_ms(\"\");\n    }else{\n      isError = true;\n      setErrorMessage_update_frequency_ms(\"The input of Data Update Frequency(ms) is not valid! Please input a positive number\");\n    }\n    if(Number.isFinite(parseInt(number_of_elements))){\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements)\n      setErrorMessage_number_of_elements(\"\");\n    }else{\n      isError = true;\n      setErrorMessage_number_of_elements(\"The input of Elements per update is not valid! Please input a positive number\");\n    }\n    if(isError){\n      return;\n    }\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL+'/setServerConfig',server_config).then(function(response){\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  \n  \n  \n  return (\n    <div id=\"Main\">\n      <h4>Server Configuration:</h4>\n      <MultiSelect\n        className=\"MultiSelectSymbol\"\n        options={props.optionsSymbols}\n        value={selectedSymbols}\n        onChange={setSelectedSymbols}\n        labelledBy={\"Select Symbols\"}\n        overrideStrings = {{\n          \"selectSomeItems\": \"Select Symbols...\",\n          \"allItemsAreSelected\": \"All Symbols are selected.\",\n          \"selectAll\": \"Select All\",\n          \"search\": \"Search symbols...\",\n          \"clearSearch\": \"Clear Search\"\n        }}\n      />\n      {update_frequency_ms_user_input}\n      <p className=\"errorMessage\">{errorMessage_update_frequency_ms}</p>\n      {number_of_elements_user_input}\n      <p className=\"errorMessage\">{errorMessage_number_of_elements}</p>\n      <button className=\"mainButton btn btn-outline-info\" onClick={()=>handleServerConfig()}>\n        Update Server Config\n      </button>\n      <br/>\n      <br/>\n      <h4>Client GUI Configuration:</h4>\n      {update_show_frequency_ms_user_input}\n      <p className=\"errorMessage\">{errorMessage_update_show_frequency_ms}</p>\n      \n\n      <button className=\" mainButton btn btn-outline-info\" onClick={()=>handleReloadTable()}>\n        Reload Table\n      </button>\n      <br/>\n      <br/>\n      <div>\n        <DataTable\n        title=\"Stock Price Table\"\n        columns={tableConfig.columns}\n        data={table}\n        pagination={true}\n        striped={true}\n        conditionalRowStyles = {tableConfig.conditionalRowStyles}\n        dense={true}\n        center = {true}\n        paginationPerPage={100}\n        paginationRowsPerPageOptions={[10, 20, 30, 50, 100]}\n        />\n      </div>\n      <br/>\n    </div>\n  );\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}