{"ast":null,"code":"var _jsxFileName = \"/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport DataTable from 'react-data-table-component';\nimport axios from 'axios';\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nconst API_URL = 'http://localhost:3000';\n\nconst App = props => {\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\n    \"update_frequency_ms\": 3000\n  });\n  const [update_frequency_ms, update_frequency_ms_user_input] = useInput({\n    type: \"text\",\n    label: \"Data Update Frequency(ms): \",\n    id: \"update_frequency_ms\"\n  });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input] = useInput({\n    type: \"text\",\n    label: \"Show Frequency(ms): \",\n    id: \"update_show_frequency_ms\"\n  });\n  const [number_of_elements, number_of_elements_user_input] = useInput({\n    type: \"text\",\n    label: \"Elements per update: \",\n    id: \"number_of_elements\"\n  });\n  const [table, setTable] = useState([]);\n\n  function handleReloadTable() {\n    clearInterval(getTableFunc);\n\n    if (Number.isFinite(parseInt(update_show_frequency_ms))) {\n      set_client_config({ ...client_config,\n        \"update_frequency_ms\": parseInt(update_show_frequency_ms)\n      });\n    }\n\n    setGetTableFunc(setInterval(function () {\n      axios.get(API_URL + \"/getTable\").then(res => {\n        console.log(res);\n        setTable(table => {\n          let result = res.data;\n          let n = res.data.length < table.length ? res.data.length : table.length;\n\n          for (let i = 0; i < n; i++) {\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n\n          return result;\n        });\n      });\n    }, client_config['update_frequency_ms']));\n  }\n\n  useEffect(() => {\n    console.log(table);\n  }, [table]);\n\n  function useInput({\n    type,\n    label,\n    id\n  }) {\n    const [value, setValue] = useState(\"\");\n    const input = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, label), /*#__PURE__*/React.createElement(\"input\", {\n      id: id,\n      value: value,\n      onChange: e => setValue(e.target.value),\n      type: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }));\n    return [value, input];\n  }\n\n  function handleServerConfig() {\n    let server_config = {};\n\n    if (Number.isFinite(parseInt(update_frequency_ms))) {\n      server_config[\"update_frequency_milliseconds\"] = parseInt(update_frequency_ms);\n    }\n\n    if (Number.isFinite(parseInt(number_of_elements))) {\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements);\n    }\n\n    axios.post(API_URL + '/setServerConfig', server_config).then(function (response) {\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  const columns = [{\n    name: 'Symbol',\n    selector: 'symbol',\n    sortable: true\n  }, {\n    name: 'Price',\n    selector: 'price',\n    sortable: true,\n    right: true\n  }];\n  const conditionalRowStyles = [{\n    when: row => row.prev_price < row.price,\n    style: {\n      color: \"green\"\n    }\n  }, {\n    when: row => row.prev_price > row.price,\n    style: {\n      color: \"red\"\n    }\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, \"Web GUI\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, \"Server Configuration:\"), update_frequency_ms_user_input, number_of_elements_user_input, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-outline-info\",\n    onClick: () => handleServerConfig(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Update Server Config\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, \"Client GUI Configuration:\"), update_show_frequency_ms_user_input, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn btn-outline-info\",\n    onClick: () => handleReloadTable(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Reload Table\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"Price Table:\"), /*#__PURE__*/React.createElement(DataTable, {\n    title: \"Stock Price Table\",\n    columns: columns,\n    data: table,\n    pagination: true,\n    striped: true,\n    conditionalRowStyles: conditionalRowStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"table\", {\n    id: \"table\",\n    className: \"table table-striped\",\n    responsive: true,\n    border: 2,\n    cellPadding: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }\n  }, \"Symbol\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }, \"Price\"), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, \"Price Change\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 12\n    }\n  }, table && Object.keys(table).map(function (element) {\n    let Color = {\n      color: \"red\"\n    };\n\n    if (table[element]) {\n      if (table[element][\"prev_price\"] <= table[element][\"price\"]) {\n        Color = {\n          color: \"green\"\n        };\n      }\n    }\n\n    let price_change = Math.round((table[element][\"price\"] - table[element][\"prev_price\"]) * 10) / 10;\n    price_change = price_change ? price_change : \"\";\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 24\n      }\n    }, table[element][\"symbol\"]), /*#__PURE__*/React.createElement(\"td\", {\n      style: Color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 24\n      }\n    }, table[element][\"price\"]), /*#__PURE__*/React.createElement(\"td\", {\n      style: Color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 24\n      }\n    }, price_change));\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/App.js"],"names":["React","useState","useEffect","DataTable","axios","API_URL","App","props","getTableFunc","setGetTableFunc","client_config","set_client_config","update_frequency_ms","update_frequency_ms_user_input","useInput","type","label","id","update_show_frequency_ms","update_show_frequency_ms_user_input","number_of_elements","number_of_elements_user_input","table","setTable","handleReloadTable","clearInterval","Number","isFinite","parseInt","setInterval","get","then","res","console","log","result","data","n","length","i","value","setValue","input","e","target","handleServerConfig","server_config","post","response","columns","name","selector","sortable","right","conditionalRowStyles","when","row","prev_price","price","style","color","Object","keys","map","element","Color","price_change","Math","round"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport DataTable from 'react-data-table-component';\nimport axios from 'axios';\n\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst API_URL = 'http://localhost:3000';\n\n\nconst App = (props) =>{\n\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\"update_frequency_ms\": 3000});\n  const [update_frequency_ms, update_frequency_ms_user_input] = useInput({ type: \"text\",label:\"Data Update Frequency(ms): \", id:\"update_frequency_ms\" });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input] = useInput({ type: \"text\",label:\"Show Frequency(ms): \", id:\"update_show_frequency_ms\" });\n  const [number_of_elements, number_of_elements_user_input] = useInput({ type: \"text\",label:\"Elements per update: \", id:\"number_of_elements\" });\n  const [table, setTable] = useState([]);\n\n\n\n  function handleReloadTable(){\n    clearInterval(getTableFunc);\n    if(Number.isFinite(parseInt(update_show_frequency_ms))){\n      set_client_config({...client_config,\"update_frequency_ms\":parseInt(update_show_frequency_ms)});\n    }\n\n    setGetTableFunc(setInterval(function(){ \n      axios.get(API_URL+\"/getTable\").then((res)=>{\n        console.log(res);\n  \n        setTable((table)=>{\n          let result = res.data;\n          let n = res.data.length < table.length? res.data.length:table.length;\n          for(let i=0; i<n; i++){\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n          return result;\n        });\n\n      }); \n    }, client_config['update_frequency_ms']));\n\n  }\n\n  useEffect(()=>{\n    console.log(table);\n  },[table]);\n\n  function useInput({ type, label, id }) {\n    const [value, setValue] = useState(\"\");\n    \n    const input = (<div><label for={id}>{label}</label>\n                    <input id={id} value={value} onChange={e => setValue(e.target.value)} type={type} />\n                  </div>);\n    return [value, input];\n  }\n\n  function handleServerConfig(){\n    let server_config = {};\n    if(Number.isFinite(parseInt(update_frequency_ms))){\n      server_config[\"update_frequency_milliseconds\"] = parseInt(update_frequency_ms)\n    }\n    if(Number.isFinite(parseInt(number_of_elements))){\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements)\n    }\n    axios.post(API_URL+'/setServerConfig',server_config).then(function(response){\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  const columns = [\n    {\n      name: 'Symbol',\n      selector: 'symbol',\n      sortable: true,\n    },\n    {\n      name: 'Price',\n      selector: 'price',\n      sortable: true,\n      right: true,\n    },\n  ];\n  const conditionalRowStyles = [\n    {\n      when: row => row.prev_price<row.price,\n      style:{\n        color: \"green\"\n      },\n    },\n    {\n      when: row => row.prev_price>row.price,\n      style:{\n        color: \"red\"\n      },\n    },    \n  ];\n\n\n  return (\n    <div id=\"App\">\n      <h1>Web GUI</h1>\n      <br/>\n      <h4>Server Configuration:</h4>\n      {update_frequency_ms_user_input}\n      {number_of_elements_user_input}\n      <button className=\"btn btn-outline-info\" onClick={()=>handleServerConfig()}>\n        Update Server Config\n      </button>\n      <br/>\n      <br/>\n      <h4>Client GUI Configuration:</h4>\n      {update_show_frequency_ms_user_input}\n      \n      \n\n      <button className=\"btn btn-outline-info\" onClick={()=>handleReloadTable()}>\n        Reload Table\n      </button>\n      <br/>\n      <br/>\n\n\n      <div>\n        <h2>Price Table:</h2>\n        <DataTable\n        title=\"Stock Price Table\"\n        columns={columns}\n        data={table}\n        pagination={true}\n        striped={true}\n        conditionalRowStyles = {conditionalRowStyles}\n        />\n\n        <table id=\"table\" className=\"table table-striped\" responsive border={2} cellPadding={5}>\n           <thead>\n              <tr>\n                <td>Symbol</td>\n                <td>Price</td>\n                <td>Price Change</td>\n              </tr>\n           </thead>\n           <tbody>\n              {\n                  table && \n                  Object.keys(table).map(function (element) {\n                    let Color = { color: \"red\" };\n                    if(table[element]){\n                      if(table[element][\"prev_price\"]<=table[element][\"price\"]){\n                        Color = { color: \"green\" };\n                      }\n                    }\n                    let price_change = Math.round((table[element][\"price\"]-table[element][\"prev_price\"])*10)/10;\n                    price_change = price_change? price_change: \"\";\n\n                     return <tr>\n                       <td>{table[element][\"symbol\"]}</td>\n                       <td style={Color}>{table[element][\"price\"]}</td>\n                       <td style={Color}>{price_change}</td>\n                     </tr>;\n                  })\n              }\n           </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}