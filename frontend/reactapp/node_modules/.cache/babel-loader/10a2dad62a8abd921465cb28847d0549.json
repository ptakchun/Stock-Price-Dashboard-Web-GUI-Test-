{"ast":null,"code":"var _jsxFileName = \"/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { symbolsListToMultiSelectOption, multiSelectOptionToSymbolsList, useInput } from './js/util';\nimport { tableConfig } from './js/config';\nimport { HistTable } from \"./js/histTable\";\nconst API_URL = 'http://localhost:3000';\n\nconst App = props => {\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\n    \"update_frequency_ms\": 3000\n  });\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Data Update Frequency(ms): \",\n    id: \"update_frequency_ms\"\n  });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input, set_update_show_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Show Frequency(ms): \",\n    id: \"update_show_frequency_ms\"\n  });\n  const [number_of_elements, number_of_elements_user_input, set_number_of_elements] = useInput({\n    type: \"text\",\n    label: \"Elements per update: \",\n    id: \"number_of_elements\"\n  });\n  const [table, setTable] = useState([]);\n  const [historicalPriceTable, setHistoricalPriceTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [optionsSymbols, setOptionsSymbols] = useState([]);\n  const [errorMessage_update_show_frequency_ms, setErrorMessage_update_show_frequency_ms] = useState(\"\");\n  const [errorMessage_update_frequency_ms, setErrorMessage_update_frequency_ms] = useState(\"\");\n  const [errorMessage_number_of_elements, setErrorMessage_number_of_elements] = useState(\"\");\n  const [selectedSymbolReplay, setSelectedSymbolReplay] = useState(null);\n  useEffect(() => {\n    set_update_show_frequency_ms(3000);\n    getServerConfig();\n    handleReloadTable();\n    setErrorMessage_update_show_frequency_ms(\"\");\n  }, []);\n  useEffect(() => {\n    if (selectedSymbolReplay) {\n      axios.post(API_URL + \"/getHistoricalPriceTable\", {\n        symbol: selectedSymbolReplay.value\n      }).then(res => {\n        console.log(res);\n        setHistoricalPriceTable(res.data);\n      });\n    }\n  }, [selectedSymbolReplay]);\n\n  function handleReloadTable() {\n    clearInterval(getTableFunc);\n    let user_input = parseInt(update_show_frequency_ms);\n\n    if (Number.isFinite(user_input) && user_input > 0) {\n      set_client_config({ ...client_config,\n        \"update_frequency_ms\": user_input\n      });\n      setErrorMessage_update_show_frequency_ms(\"\");\n    } else {\n      setErrorMessage_update_show_frequency_ms(\"The input of Show Frequency(ms) is not valid! Please input a positive number\");\n    }\n\n    setGetTableFunc(setInterval(function () {\n      axios.get(API_URL + \"/getTable\").then(res => {\n        console.log(res);\n        setTable(table => {\n          let result = res.data;\n          let n = res.data.length < table.length ? res.data.length : table.length;\n\n          for (let i = 0; i < n; i++) {\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n\n          return result;\n        });\n      });\n    }, client_config['update_frequency_ms']));\n  }\n\n  function handleServerConfig() {\n    let server_config = {};\n    let user_input_update_frequency_ms = parseInt(update_frequency_ms);\n    let isError = false;\n\n    if (Number.isFinite(user_input_update_frequency_ms) && user_input_update_frequency_ms > 0) {\n      server_config[\"update_frequency_milliseconds\"] = user_input_update_frequency_ms;\n      setErrorMessage_update_frequency_ms(\"\");\n    } else {\n      isError = true;\n      setErrorMessage_update_frequency_ms(\"The input of Data Update Frequency(ms) is not valid! Please input a positive number\");\n    }\n\n    if (Number.isFinite(parseInt(number_of_elements))) {\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements);\n      setErrorMessage_number_of_elements(\"\");\n    } else {\n      isError = true;\n      setErrorMessage_number_of_elements(\"The input of Elements per update is not valid! Please input a positive number\");\n    }\n\n    if (isError) {\n      return;\n    }\n\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL + '/setServerConfig', server_config).then(function (response) {\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  function getServerConfig() {\n    axios.get(API_URL + '/getServerConfig').then(function (res) {\n      console.log(res);\n      let arr = symbolsListToMultiSelectOption(res.data.available_symbols);\n      console.log(arr);\n      setOptionsSymbols(arr); // setSelectedSymbols(symbolsListToMultiSelectOption(arr));\n\n      set_number_of_elements(res.data.elements_per_update);\n      set_update_frequency_ms(res.data.update_frequency_milliseconds);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, \"Web GUI\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HistTable, {\n    optionsSymbols: optionsSymbols,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/App.js"],"names":["React","useState","useEffect","DataTable","MultiSelect","axios","symbolsListToMultiSelectOption","multiSelectOptionToSymbolsList","useInput","tableConfig","HistTable","API_URL","App","props","getTableFunc","setGetTableFunc","client_config","set_client_config","update_frequency_ms","update_frequency_ms_user_input","set_update_frequency_ms","type","label","id","update_show_frequency_ms","update_show_frequency_ms_user_input","set_update_show_frequency_ms","number_of_elements","number_of_elements_user_input","set_number_of_elements","table","setTable","historicalPriceTable","setHistoricalPriceTable","selectedSymbols","setSelectedSymbols","optionsSymbols","setOptionsSymbols","errorMessage_update_show_frequency_ms","setErrorMessage_update_show_frequency_ms","errorMessage_update_frequency_ms","setErrorMessage_update_frequency_ms","errorMessage_number_of_elements","setErrorMessage_number_of_elements","selectedSymbolReplay","setSelectedSymbolReplay","getServerConfig","handleReloadTable","post","symbol","value","then","res","console","log","data","clearInterval","user_input","parseInt","Number","isFinite","setInterval","get","result","n","length","i","handleServerConfig","server_config","user_input_update_frequency_ms","isError","response","arr","available_symbols","elements_per_update","update_frequency_milliseconds"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,4BAAtB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,wCAAP;AACA,OAAO,WAAP;AACA,SAAQC,8BAAR,EAAwCC,8BAAxC,EAAwEC,QAAxE,QAAuF,WAAvF;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,SAAQC,SAAR,QAAwB,gBAAxB;AAEA,MAAMC,OAAO,GAAG,uBAAhB;;AAGA,MAAMC,GAAG,GAAIC,KAAD,IAAU;AACpB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACe,aAAD,EAAgBC,iBAAhB,IAAqChB,QAAQ,CAAC;AAAC,2BAAuB;AAAxB,GAAD,CAAnD;AACA,QAAM,CAACiB,mBAAD,EAAsBC,8BAAtB,EAAsDC,uBAAtD,IAAiFZ,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAE,MAAR;AAAeC,IAAAA,KAAK,EAAC,6BAArB;AAAoDC,IAAAA,EAAE,EAAC;AAAvD,GAAD,CAA/F;AACA,QAAM,CAACC,wBAAD,EAA2BC,mCAA3B,EAA+DC,4BAA/D,IAA+FlB,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAE,MAAR;AAAeC,IAAAA,KAAK,EAAC,sBAArB;AAA6CC,IAAAA,EAAE,EAAC;AAAhD,GAAD,CAA7G;AACA,QAAM,CAACI,kBAAD,EAAqBC,6BAArB,EAAmDC,sBAAnD,IAA6ErB,QAAQ,CAAC;AAAEa,IAAAA,IAAI,EAAE,MAAR;AAAeC,IAAAA,KAAK,EAAC,uBAArB;AAA8CC,IAAAA,EAAE,EAAC;AAAjD,GAAD,CAA3F;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoB9B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC+B,oBAAD,EAAuBC,uBAAvB,IAAkDhC,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM,CAACiC,eAAD,EAAkBC,kBAAlB,IAAwClC,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACmC,cAAD,EAAiBC,iBAAjB,IAAsCpC,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACqC,qCAAD,EAAwCC,wCAAxC,IAAoFtC,QAAQ,CAAC,EAAD,CAAlG;AACA,QAAM,CAACuC,gCAAD,EAAmCC,mCAAnC,IAA0ExC,QAAQ,CAAC,EAAD,CAAxF;AACA,QAAM,CAACyC,+BAAD,EAAkCC,kCAAlC,IAAwE1C,QAAQ,CAAC,EAAD,CAAtF;AACA,QAAM,CAAC2C,oBAAD,EAAuBC,uBAAvB,IAAkD5C,QAAQ,CAAC,IAAD,CAAhE;AAEAC,EAAAA,SAAS,CAAC,MAAI;AACZwB,IAAAA,4BAA4B,CAAC,IAAD,CAA5B;AACAoB,IAAAA,eAAe;AACfC,IAAAA,iBAAiB;AACjBR,IAAAA,wCAAwC,CAAC,EAAD,CAAxC;AACD,GALQ,EAKP,EALO,CAAT;AAOArC,EAAAA,SAAS,CAAC,MAAI;AACZ,QAAG0C,oBAAH,EAAwB;AACtBvC,MAAAA,KAAK,CAAC2C,IAAN,CAAWrC,OAAO,GAAC,0BAAnB,EAA+C;AAACsC,QAAAA,MAAM,EAACL,oBAAoB,CAACM;AAA7B,OAA/C,EAAoFC,IAApF,CAA0FC,GAAD,IAAO;AAC9FC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEAnB,QAAAA,uBAAuB,CAACmB,GAAG,CAACG,IAAL,CAAvB;AAED,OALD;AAMD;AAEF,GAVQ,EAUP,CAACX,oBAAD,CAVO,CAAT;;AAaA,WAASG,iBAAT,GAA4B;AAC1BS,IAAAA,aAAa,CAAC1C,YAAD,CAAb;AACA,QAAI2C,UAAU,GAAGC,QAAQ,CAAClC,wBAAD,CAAzB;;AACA,QAAGmC,MAAM,CAACC,QAAP,CAAgBH,UAAhB,KAA+BA,UAAU,GAAG,CAA/C,EAAiD;AAC/CxC,MAAAA,iBAAiB,CAAC,EAAC,GAAGD,aAAJ;AAAmB,+BAAsByC;AAAzC,OAAD,CAAjB;AACAlB,MAAAA,wCAAwC,CAAC,EAAD,CAAxC;AACD,KAHD,MAGK;AACHA,MAAAA,wCAAwC,CAAC,8EAAD,CAAxC;AACD;;AAEDxB,IAAAA,eAAe,CAAC8C,WAAW,CAAC,YAAU;AACpCxD,MAAAA,KAAK,CAACyD,GAAN,CAAUnD,OAAO,GAAC,WAAlB,EAA+BwC,IAA/B,CAAqCC,GAAD,IAAO;AACzCC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AAEArB,QAAAA,QAAQ,CAAED,KAAD,IAAS;AAChB,cAAIiC,MAAM,GAAGX,GAAG,CAACG,IAAjB;AACA,cAAIS,CAAC,GAAGZ,GAAG,CAACG,IAAJ,CAASU,MAAT,GAAkBnC,KAAK,CAACmC,MAAxB,GAAgCb,GAAG,CAACG,IAAJ,CAASU,MAAzC,GAAgDnC,KAAK,CAACmC,MAA9D;;AACA,eAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACF,CAAf,EAAkBE,CAAC,EAAnB,EAAsB;AACpBH,YAAAA,MAAM,CAACG,CAAD,CAAN,CAAU,YAAV,IAA0BpC,KAAK,CAACoC,CAAD,CAAL,CAAS,OAAT,CAA1B;AACD;;AACD,iBAAOH,MAAP;AACD,SAPO,CAAR;AASD,OAZD;AAaD,KAd0B,EAcxB/C,aAAa,CAAC,qBAAD,CAdW,CAAZ,CAAf;AAgBD;;AAED,WAASmD,kBAAT,GAA6B;AAC3B,QAAIC,aAAa,GAAG,EAApB;AACA,QAAIC,8BAA8B,GAAGX,QAAQ,CAACxC,mBAAD,CAA7C;AACA,QAAIoD,OAAO,GAAG,KAAd;;AACA,QAAGX,MAAM,CAACC,QAAP,CAAgBS,8BAAhB,KAAmDA,8BAA8B,GAAG,CAAvF,EAA0F;AACxFD,MAAAA,aAAa,CAAC,+BAAD,CAAb,GAAiDC,8BAAjD;AACA5B,MAAAA,mCAAmC,CAAC,EAAD,CAAnC;AACD,KAHD,MAGK;AACH6B,MAAAA,OAAO,GAAG,IAAV;AACA7B,MAAAA,mCAAmC,CAAC,qFAAD,CAAnC;AACD;;AACD,QAAGkB,MAAM,CAACC,QAAP,CAAgBF,QAAQ,CAAC/B,kBAAD,CAAxB,CAAH,EAAiD;AAC/CyC,MAAAA,aAAa,CAAC,qBAAD,CAAb,GAAuCV,QAAQ,CAAC/B,kBAAD,CAA/C;AACAgB,MAAAA,kCAAkC,CAAC,EAAD,CAAlC;AACD,KAHD,MAGK;AACH2B,MAAAA,OAAO,GAAG,IAAV;AACA3B,MAAAA,kCAAkC,CAAC,+EAAD,CAAlC;AACD;;AACD,QAAG2B,OAAH,EAAW;AACT;AACD;;AACDF,IAAAA,aAAa,CAAC,SAAD,CAAb,GAA2B7D,8BAA8B,CAAC2B,eAAD,CAAzD;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYc,aAAZ;AACA/D,IAAAA,KAAK,CAAC2C,IAAN,CAAWrC,OAAO,GAAC,kBAAnB,EAAsCyD,aAAtC,EAAqDjB,IAArD,CAA0D,UAASoB,QAAT,EAAkB;AAC1ElB,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;AACD,KAHD;AAID;;AAED,WAASzB,eAAT,GAA0B;AACxBzC,IAAAA,KAAK,CAACyD,GAAN,CAAUnD,OAAO,GAAC,kBAAlB,EAAsCwC,IAAtC,CAA2C,UAASC,GAAT,EAAa;AACtDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,UAAIoB,GAAG,GAAGlE,8BAA8B,CAAC8C,GAAG,CAACG,IAAJ,CAASkB,iBAAV,CAAxC;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAYkB,GAAZ;AACAnC,MAAAA,iBAAiB,CAACmC,GAAD,CAAjB,CAJsD,CAKtD;;AACA3C,MAAAA,sBAAsB,CAACuB,GAAG,CAACG,IAAJ,CAASmB,mBAAV,CAAtB;AACAtD,MAAAA,uBAAuB,CAACgC,GAAG,CAACG,IAAJ,CAASoB,6BAAV,CAAvB;AACD,KARD;AASD;;AAKD,sBACE;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AACA,IAAA,cAAc,EAAIvC,cADlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CALF,CADF;AAcD,CAzHD;;AA2HA,eAAexB,GAAf","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\n\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport {symbolsListToMultiSelectOption, multiSelectOptionToSymbolsList, useInput} from './js/util'\nimport {tableConfig} from './js/config'\n\nimport {HistTable} from \"./js/histTable\"\n\nconst API_URL = 'http://localhost:3000';\n\n\nconst App = (props) =>{\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\"update_frequency_ms\": 3000});\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({ type: \"text\",label:\"Data Update Frequency(ms): \", id:\"update_frequency_ms\" });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input,set_update_show_frequency_ms] = useInput({ type: \"text\",label:\"Show Frequency(ms): \", id:\"update_show_frequency_ms\" });\n  const [number_of_elements, number_of_elements_user_input,set_number_of_elements] = useInput({ type: \"text\",label:\"Elements per update: \", id:\"number_of_elements\" });\n  const [table, setTable] = useState([]);\n  const [historicalPriceTable, setHistoricalPriceTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [optionsSymbols, setOptionsSymbols] = useState([]);\n  const [errorMessage_update_show_frequency_ms, setErrorMessage_update_show_frequency_ms] = useState(\"\");\n  const [errorMessage_update_frequency_ms, setErrorMessage_update_frequency_ms] = useState(\"\");\n  const [errorMessage_number_of_elements, setErrorMessage_number_of_elements] = useState(\"\");\n  const [selectedSymbolReplay, setSelectedSymbolReplay] = useState(null); \n\n  useEffect(()=>{\n    set_update_show_frequency_ms(3000);\n    getServerConfig();\n    handleReloadTable();\n    setErrorMessage_update_show_frequency_ms(\"\");\n  },[]);\n\n  useEffect(()=>{\n    if(selectedSymbolReplay){\n      axios.post(API_URL+\"/getHistoricalPriceTable\", {symbol:selectedSymbolReplay.value}).then((res)=>{\n        console.log(res);\n  \n        setHistoricalPriceTable(res.data);\n  \n      }); \n    }\n    \n  },[selectedSymbolReplay]);\n\n  \n  function handleReloadTable(){\n    clearInterval(getTableFunc);\n    let user_input = parseInt(update_show_frequency_ms);\n    if(Number.isFinite(user_input) && user_input > 0){\n      set_client_config({...client_config, \"update_frequency_ms\":user_input});\n      setErrorMessage_update_show_frequency_ms(\"\");\n    }else{\n      setErrorMessage_update_show_frequency_ms(\"The input of Show Frequency(ms) is not valid! Please input a positive number\");\n    }\n    \n    setGetTableFunc(setInterval(function(){ \n      axios.get(API_URL+\"/getTable\").then((res)=>{\n        console.log(res);\n  \n        setTable((table)=>{\n          let result = res.data;\n          let n = res.data.length < table.length? res.data.length:table.length;\n          for(let i=0; i<n; i++){\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n          return result;\n        });\n\n      }); \n    }, client_config['update_frequency_ms']));\n\n  }\n\n  function handleServerConfig(){\n    let server_config = {};\n    let user_input_update_frequency_ms = parseInt(update_frequency_ms);\n    let isError = false;\n    if(Number.isFinite(user_input_update_frequency_ms) && user_input_update_frequency_ms > 0 ){\n      server_config[\"update_frequency_milliseconds\"] = user_input_update_frequency_ms;\n      setErrorMessage_update_frequency_ms(\"\");\n    }else{\n      isError = true;\n      setErrorMessage_update_frequency_ms(\"The input of Data Update Frequency(ms) is not valid! Please input a positive number\");\n    }\n    if(Number.isFinite(parseInt(number_of_elements))){\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements)\n      setErrorMessage_number_of_elements(\"\");\n    }else{\n      isError = true;\n      setErrorMessage_number_of_elements(\"The input of Elements per update is not valid! Please input a positive number\");\n    }\n    if(isError){\n      return;\n    }\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL+'/setServerConfig',server_config).then(function(response){\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  function getServerConfig(){\n    axios.get(API_URL+'/getServerConfig').then(function(res){\n      console.log(res);\n      let arr = symbolsListToMultiSelectOption(res.data.available_symbols);\n      console.log(arr);\n      setOptionsSymbols(arr); \n      // setSelectedSymbols(symbolsListToMultiSelectOption(arr));\n      set_number_of_elements(res.data.elements_per_update); \n      set_update_frequency_ms(res.data.update_frequency_milliseconds);\n    });\n  }\n\n  \n  \n  \n  return (\n    <div id=\"App\">\n      <h1>Web GUI</h1>\n      <br/>\n      \n      <br/>\n      <div>\n          <HistTable \n          optionsSymbols = {optionsSymbols}\n          />\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}