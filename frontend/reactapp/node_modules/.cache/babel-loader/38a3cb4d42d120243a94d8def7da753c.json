{"ast":null,"code":"var _jsxFileName = \"/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nconst API_URL = 'http://localhost:3000';\n\nconst App = props => {\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\n    \"update_frequency_ms\": 3000\n  });\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Data Update Frequency(ms): \",\n    id: \"update_frequency_ms\"\n  });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input, set_update_show_frequency_ms] = useInput({\n    type: \"text\",\n    label: \"Show Frequency(ms): \",\n    id: \"update_show_frequency_ms\"\n  });\n  const [number_of_elements, number_of_elements_user_input, set_number_of_elements] = useInput({\n    type: \"text\",\n    label: \"Elements per update: \",\n    id: \"number_of_elements\"\n  });\n  const [table, setTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [optionsSymbols, setOptionsSymbols] = useState([]);\n\n  function handleReloadTable() {\n    clearInterval(getTableFunc);\n\n    if (Number.isFinite(parseInt(update_show_frequency_ms))) {\n      set_client_config({ ...client_config,\n        \"update_frequency_ms\": parseInt(update_show_frequency_ms)\n      });\n    }\n\n    setGetTableFunc(setInterval(function () {\n      axios.get(API_URL + \"/getTable\").then(res => {\n        console.log(res);\n        setTable(table => {\n          let result = res.data;\n          let n = res.data.length < table.length ? res.data.length : table.length;\n\n          for (let i = 0; i < n; i++) {\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n\n          return result;\n        });\n      });\n    }, client_config['update_frequency_ms']));\n  }\n\n  useEffect(() => {\n    console.log(table);\n  }, [table]);\n  useEffect(() => {\n    getServerConfig();\n  }, []);\n\n  function useInput({\n    type,\n    label,\n    id\n  }) {\n    const [value, setValue] = useState(\"\");\n    const input = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      for: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 25\n      }\n    }, label), /*#__PURE__*/React.createElement(\"input\", {\n      id: id,\n      className: \"textInput\",\n      value: value,\n      onChange: e => setValue(e.target.value),\n      type: type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }));\n    return [value, input, setValue];\n  }\n\n  function handleServerConfig() {\n    let server_config = {};\n\n    if (Number.isFinite(parseInt(update_frequency_ms))) {\n      server_config[\"update_frequency_milliseconds\"] = parseInt(update_frequency_ms);\n    }\n\n    if (Number.isFinite(parseInt(number_of_elements))) {\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements);\n    }\n\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL + '/setServerConfig', server_config).then(function (response) {\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  function getServerConfig() {\n    axios.get(API_URL + '/getServerConfig').then(function (res) {\n      console.log(res);\n      let arr = symbolsListToMultiSelectOption(res.data.symbols);\n      console.log(arr);\n      setOptionsSymbols(arr); // setSelectedSymbols(symbolsListToMultiSelectOption(arr));\n\n      set_number_of_elements(res.data.elements_per_update);\n      set_update_frequency_ms(res.data.update_frequency_milliseconds);\n    });\n  }\n\n  function symbolsListToMultiSelectOption(arr) {\n    let output = [];\n\n    for (let i = 0; i < arr.length; ++i) {\n      output.push({\n        label: arr[i],\n        value: arr[i]\n      });\n    }\n\n    return output;\n  }\n\n  function multiSelectOptionToSymbolsList(arr) {\n    let output = [];\n\n    for (let i = 0; i < arr.length; ++i) {\n      output.push(arr[i].value);\n    }\n\n    return output;\n  } //Table configuration\n\n\n  const tableConfig = {\n    columns: [{\n      name: 'Symbol',\n      selector: 'symbol'\n    }, {\n      name: 'Price',\n      selector: 'price',\n      right: true\n    }],\n    conditionalRowStyles: [{\n      when: row => row.prev_price < row.price,\n      style: {\n        color: \"green\"\n      }\n    }, {\n      when: row => row.prev_price > row.price,\n      style: {\n        color: \"red\"\n      }\n    }]\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, \"Web GUI\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, \"Server Configuration:\"), /*#__PURE__*/React.createElement(MultiSelect, {\n    options: optionsSymbols,\n    value: selectedSymbols,\n    onChange: setSelectedSymbols,\n    labelledBy: \"Select Symobols\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), update_frequency_ms_user_input, number_of_elements_user_input, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"mainButton btn btn-outline-info\",\n    onClick: () => handleServerConfig(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, \"Update Server Config\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \"Client GUI Configuration:\"), update_show_frequency_ms_user_input, /*#__PURE__*/React.createElement(\"button\", {\n    className: \" mainButton btn btn-outline-info\",\n    onClick: () => handleReloadTable(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"Reload Table\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, \"Price Table:\"), /*#__PURE__*/React.createElement(DataTable, {\n    title: \"Stock Price Table\",\n    columns: tableConfig.columns,\n    data: table,\n    pagination: true,\n    striped: true,\n    conditionalRowStyles: tableConfig.conditionalRowStyles,\n    dense: true,\n    center: true,\n    paginationPerPage: 100,\n    paginationRowsPerPageOptions: [10, 20, 30, 50, 100],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/ptakchun/Downloads/CODE/Lighthouse/Test1/team-29/frontend/reactapp/src/App.js"],"names":["React","useState","useEffect","DataTable","MultiSelect","axios","API_URL","App","props","getTableFunc","setGetTableFunc","client_config","set_client_config","update_frequency_ms","update_frequency_ms_user_input","set_update_frequency_ms","useInput","type","label","id","update_show_frequency_ms","update_show_frequency_ms_user_input","set_update_show_frequency_ms","number_of_elements","number_of_elements_user_input","set_number_of_elements","table","setTable","selectedSymbols","setSelectedSymbols","optionsSymbols","setOptionsSymbols","handleReloadTable","clearInterval","Number","isFinite","parseInt","setInterval","get","then","res","console","log","result","data","n","length","i","getServerConfig","value","setValue","input","e","target","handleServerConfig","server_config","multiSelectOptionToSymbolsList","post","response","arr","symbolsListToMultiSelectOption","symbols","elements_per_update","update_frequency_milliseconds","output","push","tableConfig","columns","name","selector","right","conditionalRowStyles","when","row","prev_price","price","style","color"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from 'react';\nimport DataTable from 'react-data-table-component';\nimport MultiSelect from \"react-multi-select-component\";\nimport axios from 'axios';\n\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst API_URL = 'http://localhost:3000';\n\n\nconst App = (props) =>{\n\n  const [getTableFunc, setGetTableFunc] = useState(0);\n  const [client_config, set_client_config] = useState({\"update_frequency_ms\": 3000});\n  const [update_frequency_ms, update_frequency_ms_user_input, set_update_frequency_ms] = useInput({ type: \"text\",label:\"Data Update Frequency(ms): \", id:\"update_frequency_ms\" });\n  const [update_show_frequency_ms, update_show_frequency_ms_user_input,set_update_show_frequency_ms] = useInput({ type: \"text\",label:\"Show Frequency(ms): \", id:\"update_show_frequency_ms\" });\n  const [number_of_elements, number_of_elements_user_input,set_number_of_elements] = useInput({ type: \"text\",label:\"Elements per update: \", id:\"number_of_elements\" });\n  const [table, setTable] = useState([]);\n  const [selectedSymbols, setSelectedSymbols] = useState([]);\n  const [optionsSymbols, setOptionsSymbols] = useState([]);\n\n  \n\n  function handleReloadTable(){\n    clearInterval(getTableFunc);\n    if(Number.isFinite(parseInt(update_show_frequency_ms))){\n      set_client_config({...client_config,\"update_frequency_ms\":parseInt(update_show_frequency_ms)});\n    }\n\n    setGetTableFunc(setInterval(function(){ \n      axios.get(API_URL+\"/getTable\").then((res)=>{\n        console.log(res);\n  \n        setTable((table)=>{\n          let result = res.data;\n          let n = res.data.length < table.length? res.data.length:table.length;\n          for(let i=0; i<n; i++){\n            result[i][\"prev_price\"] = table[i]['price'];\n          }\n          return result;\n        });\n\n      }); \n    }, client_config['update_frequency_ms']));\n\n  }\n\n  useEffect(()=>{\n    console.log(table);\n  },[table]);\n\n  useEffect(()=>{\n    getServerConfig();\n  },[]);\n\n  function useInput({ type, label, id }) {\n    const [value, setValue] = useState(\"\");\n    \n    const input = (<div><label for={id}>{label}</label>\n                    <input id={id} className=\"textInput\" value={value} onChange={e => setValue(e.target.value)} type={type} />\n                  </div>);\n    return [value, input,setValue];\n  }\n\n  function handleServerConfig(){\n    let server_config = {};\n    if(Number.isFinite(parseInt(update_frequency_ms))){\n      server_config[\"update_frequency_milliseconds\"] = parseInt(update_frequency_ms)\n    }\n    if(Number.isFinite(parseInt(number_of_elements))){\n      server_config[\"elements_per_update\"] = parseInt(number_of_elements)\n    }\n    server_config[\"symbols\"] = multiSelectOptionToSymbolsList(selectedSymbols);\n    console.log(server_config);\n    axios.post(API_URL+'/setServerConfig',server_config).then(function(response){\n      console.log(\"success update\");\n      console.log(response);\n    });\n  }\n\n  function getServerConfig(){\n    axios.get(API_URL+'/getServerConfig').then(function(res){\n      console.log(res);\n      let arr = symbolsListToMultiSelectOption(res.data.symbols);\n      console.log(arr);\n      setOptionsSymbols(arr); \n      // setSelectedSymbols(symbolsListToMultiSelectOption(arr));\n      set_number_of_elements(res.data.elements_per_update); \n      set_update_frequency_ms(res.data.update_frequency_milliseconds);\n    });\n  }\n\n  function symbolsListToMultiSelectOption(arr){\n    let output = [];\n    for(let i =0; i<arr.length;++i){\n      output.push({label: arr[i], value:arr[i]});\n    }\n    return output;\n  }\n\n  function multiSelectOptionToSymbolsList(arr){\n    let output = [];\n    for(let i =0; i<arr.length;++i){\n      output.push(arr[i].value);\n    }\n    return output;\n  }\n\n  //Table configuration\n  const tableConfig = {\n    columns:[\n      {\n        name: 'Symbol',\n        selector: 'symbol',\n      },\n      {\n        name: 'Price',\n        selector: 'price',\n        right: true,\n      },\n    ],\n    conditionalRowStyles:[\n      {\n        when: row => row.prev_price<row.price,\n        style:{\n          color: \"green\"\n        },\n      },\n      {\n        when: row => row.prev_price>row.price,\n        style:{\n          color: \"red\"\n        },\n      },    \n    ],\n  };\n  \n  \n\n\n  return (\n    <div id=\"App\">\n      <h1>Web GUI</h1>\n      <br/>\n      <h4>Server Configuration:</h4>\n      <MultiSelect\n        options={optionsSymbols}\n        value={selectedSymbols}\n        onChange={setSelectedSymbols}\n        labelledBy={\"Select Symobols\"}\n      />\n      {update_frequency_ms_user_input}\n      {number_of_elements_user_input}\n      <button className=\"mainButton btn btn-outline-info\" onClick={()=>handleServerConfig()}>\n        Update Server Config\n      </button>\n      <br/>\n      <br/>\n      <h4>Client GUI Configuration:</h4>\n      {update_show_frequency_ms_user_input}\n      \n      \n\n      <button className=\" mainButton btn btn-outline-info\" onClick={()=>handleReloadTable()}>\n        Reload Table\n      </button>\n      <br/>\n      <br/>\n\n\n      <div>\n        <h2>Price Table:</h2>\n        <DataTable\n        title=\"Stock Price Table\"\n        columns={tableConfig.columns}\n        data={table}\n        pagination={true}\n        striped={true}\n        conditionalRowStyles = {tableConfig.conditionalRowStyles}\n        dense={true}\n        center = {true}\n        paginationPerPage={100}\n        paginationRowsPerPageOptions={[10, 20, 30, 50, 100]}\n        />\n\n        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}